{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { TasksService } from './tasks.service';\nimport { Task } from './schema/tasks';\nlet TasksComponent = class TasksComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n    this.tasks = [];\n    this.task = new Task();\n    this._id = '';\n    this.task_name = '';\n    this.complete = false;\n  }\n  ngOnInit() {\n    this.viewTasks();\n  }\n  viewTasks() {\n    this.taskService.getTasks().subscribe({\n      next: data => {\n        this.tasks = data;\n        console.log(data);\n      },\n      error: e => console.error(e)\n    });\n  }\n  viewTask(id) {\n    //var tasks=this.tasks;\n    this.taskService.viewTask(id).subscribe({\n      next: data => {\n        this.task = data;\n        this._id = this.task._id;\n        this.task_name = this.task.task_name;\n        this.complete = this.task.complete;\n      }\n    });\n  }\n  addeditTask(addoredit) {\n    const newTask = {\n      task_name: this.task_name,\n      complete: this.complete\n    };\n    if (this._id == '0') {\n      //this.taskService.addTask(newTask).subscribe(({task})=>{this.tasks.push(task);})\n      this.taskService.addTask(newTask).subscribe(data => alert('Task added'));\n    } else {\n      this.taskService.updateTask(this._id, newTask).subscribe(data => alert('Task updated'));\n    }\n  }\n  deleteTask(id) {\n    var tasks = this.tasks;\n    this.taskService.deleteTask(id).subscribe(data => {\n      // if(data.n==1){\n      for (var i = 0; i < tasks.length; i++) {\n        if (tasks[i]._id == id) {\n          tasks.splice(i, 1);\n        }\n        // }\n      }\n    });\n  }\n\n  reloadpage() {\n    window.location.reload();\n  }\n};\nTasksComponent = __decorate([Component({\n  selector: 'app-tasks',\n  templateUrl: './tasks.component.html',\n  styleUrls: ['./tasks.component.css'],\n  providers: [TasksService]\n})], TasksComponent);\nexport { TasksComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAe,eAAe;AAEhD,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,IAAI,QAAQ,gBAAgB;AAS9B,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAM3BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAL7B,UAAK,GAAS,EAAE;IAChB,SAAI,GAAS,IAAIH,IAAI;IACrB,QAAG,GAAQ,EAAE;IACb,cAAS,GAAQ,EAAE;IACnB,aAAQ,GAAS,KAAK;EAGxB;EAEAI,QAAQ;IACR,IAAI,CAACC,SAAS,EAAE;EAEhB;EAEAA,SAAS;IACP,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE,CAACC,SAAS,CAAC;MACpCC,IAAI,EAAGC,IAAQ,IAAI;QACjB,IAAI,CAACC,KAAK,GAAGD,IAAI;QACjBE,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACnB,CAAC;MACDI,KAAK,EAAGC,CAAK,IAAKH,OAAO,CAACE,KAAK,CAACC,CAAC;KAClC,CAAC;EACJ;EAEAC,QAAQ,CAACC,EAAM;IACd;IACD,IAAI,CAACb,WAAW,CAACY,QAAQ,CAACC,EAAE,CAAC,CAACT,SAAS,CAAC;MAACC,IAAI,EAAEC,IAAQ,IAAG;QACxD,IAAI,CAACQ,IAAI,GAACR,IAAI;QACd,IAAI,CAACS,GAAG,GAAC,IAAI,CAACD,IAAI,CAACC,GAAG;QACtB,IAAI,CAACC,SAAS,GAAC,IAAI,CAACF,IAAI,CAACE,SAAS;QAClC,IAAI,CAACC,QAAQ,GAAC,IAAI,CAACH,IAAI,CAACG,QAAQ;MAClC;IAAC,CAAC,CAAC;EACH;EAGAC,WAAW,CAACC,SAAa;IAEvB,MAAMC,OAAO,GAAC;MACZJ,SAAS,EAAC,IAAI,CAACA,SAAS;MACxBC,QAAQ,EAAC,IAAI,CAACA;KACf;IACD,IAAG,IAAI,CAACF,GAAG,IAAE,GAAG,EAAC;MACf;MACA,IAAI,CAACf,WAAW,CAACqB,OAAO,CAACD,OAAO,CAAC,CAAChB,SAAS,CAACE,IAAI,IAAEgB,KAAK,CAAC,YAAY,CAAC,CAAC;KACvE,MACI;MACH,IAAI,CAACtB,WAAW,CAACuB,UAAU,CAAC,IAAI,CAACR,GAAG,EAACK,OAAO,CAAC,CAAChB,SAAS,CAACE,IAAI,IAAEgB,KAAK,CAAC,cAAc,CAAC,CAAC;;EAGxF;EAGAE,UAAU,CAACX,EAAM;IACf,IAAIN,KAAK,GAAC,IAAI,CAACA,KAAK;IACtB,IAAI,CAACP,WAAW,CAACwB,UAAU,CAACX,EAAE,CAAC,CAACT,SAAS,CAACE,IAAI,IAAE;MAC/C;MACG,KAAK,IAAImB,CAAC,GAAC,CAAC,EAACA,CAAC,GAAClB,KAAK,CAACmB,MAAM,EAACD,CAAC,EAAE,EAAC;QAC9B,IAAGlB,KAAK,CAACkB,CAAC,CAAC,CAACV,GAAG,IAAEF,EAAE,EAAC;UAClBN,KAAK,CAACoB,MAAM,CAACF,CAAC,EAAC,CAAC,CAAC;;QAEtB;;IAEH,CAAC,CAAC;EACF;;EAEAG,UAAU;IACRC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B;CAEC;AAtEYjC,cAAc,eAN1BH,SAAS,CAAC;EACTqC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB,CAAC;EACpCC,SAAS,EAAC,CAACvC,YAAY;CACxB,CAAC,GACWE,cAAc,CAsE1B;SAtEYA,cAAc","names":["Component","TasksService","Task","TasksComponent","constructor","taskService","ngOnInit","viewTasks","getTasks","subscribe","next","data","tasks","console","log","error","e","viewTask","id","task","_id","task_name","complete","addeditTask","addoredit","newTask","addTask","alert","updateTask","deleteTask","i","length","splice","reloadpage","window","location","reload","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["C:\\Users\\hp\\mean3\\Task-Manager-CRUD-Angular15-MEAN-Stack\\Frontend\\src\\app\\tasks\\tasks.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TasksService } from './tasks.service';\r\nimport { Task } from './schema/tasks';\r\n\r\n\r\n@Component({\r\n  selector: 'app-tasks',\r\n  templateUrl: './tasks.component.html',\r\n  styleUrls: ['./tasks.component.css'],\r\n  providers:[TasksService]\r\n})\r\nexport class TasksComponent {\r\n  tasks: Task[]=[];\r\n  task: Task = new Task;\r\n  _id:string='';\r\n  task_name:string='';\r\n  complete:boolean=false;\r\nconstructor(private taskService:TasksService){\r\n\r\n}\r\n\r\nngOnInit(){\r\nthis.viewTasks();\r\n\r\n}\r\n\r\nviewTasks(){\r\n  this.taskService.getTasks().subscribe({\r\n    next: (data:any) => {\r\n      this.tasks = data;\r\n      console.log(data);\r\n    },\r\n    error: (e:any) => console.error(e)\r\n  });\r\n}\r\n\r\nviewTask(id:any){\r\n //var tasks=this.tasks;\r\nthis.taskService.viewTask(id).subscribe({next:(data:any)=>{\r\n  this.task=data;\r\n  this._id=this.task._id;\r\n  this.task_name=this.task.task_name;\r\n  this.complete=this.task.complete;\r\n}})\r\n}\r\n\r\n\r\naddeditTask(addoredit:any){\r\n\r\n  const newTask={\r\n    task_name:this.task_name,\r\n    complete:this.complete\r\n  }\r\n  if(this._id=='0'){\r\n    //this.taskService.addTask(newTask).subscribe(({task})=>{this.tasks.push(task);})\r\n    this.taskService.addTask(newTask).subscribe(data=>alert('Task added'));\r\n  }\r\n  else {\r\n    this.taskService.updateTask(this._id,newTask).subscribe(data=>alert('Task updated'));\r\n  }\r\n\r\n}\r\n\r\n\r\ndeleteTask(id:any){\r\n  var tasks=this.tasks;\r\nthis.taskService.deleteTask(id).subscribe(data=>{\r\n // if(data.n==1){\r\n    for (var i=0;i<tasks.length;i++){\r\n      if(tasks[i]._id==id){\r\n        tasks.splice(i,1);\r\n      }\r\n   // }\r\n  }\r\n})\r\n}\r\n\r\nreloadpage(){\r\n  window.location.reload();\r\n}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}